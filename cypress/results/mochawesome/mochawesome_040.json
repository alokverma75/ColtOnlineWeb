{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2020-12-10T20:07:58.293Z",
    "end": "2020-12-10T20:08:15.654Z",
    "duration": 17361,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2064a2ce-f8b1-4fb6-8064-520888ef226b",
      "title": "",
      "fullFile": "cypress\\integration\\OnlineWeb\\LoginPageTestCustUser.js",
      "file": "cypress\\integration\\OnlineWeb\\LoginPageTestCustUser.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2516c9a4-1be7-4826-8e71-790b734f353e",
          "title": "Test Login Functionality",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should test login functionality in macbook-16 screen",
              "fullTitle": "Test Login Functionality should test login functionality in macbook-16 screen",
              "timedOut": null,
              "duration": 17275,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (Cypress._.isArray(device)) {\n  cy.viewport(device[0], device[1]);\n} else {\n  cy.viewport(device);\n}\nutilPage.visitBillingPage();\nCypress.on('uncaught:exception', function (err, runnable) {\n  // returning false here prevents Cypress from\n  // failing the test\n  //cy.log(err)\n  return false;\n});\nif (!screenshotTaken) {\n  utilPage.takePercySnapShot('Login Page');\n  screenshotTaken = true;\n}\nloginPage.getUserIDField().type(data.InternalAdmin);\nloginPage.getPasswordField().type(data.password);\nloginPage.getLoginButton().click();\ncy.wait(10000); // Cypress.on('uncaught:exception', (err, runnable) => {\n//     // returning false here prevents Cypress from\n//     // failing the test\n//     //cy.log(err)\n//     return false\n// })\nutilPage.getAuthorizeAPIEndPoint().as('authorize');\ncy.get('@authorize').should(function (response) {\n  expect(response.status).to.eq(200); // expect(response).to.have.length(500)\n  expect(response).to.have.property('headers').to.include({\n    'server': 'Colt' // ,\n    // 'content-type': 'application/json;charset=UTF-8'\n  }); //check for response bdoy to have all elements as below\n  expect(response.body).property(data.authAPiJSONData.operationElement);\n  expect(response.body).property(data.authAPiJSONData.dataElement);\n  expect(response.body).to.containSubset({\n    \"operationStatus\": {\n      \"success\": true,\n      \"messages\": [\"success\"]\n    }\n  }); //To test only selected data\n  expect(response.body.operationStatus.success).to.eq(true);\n  expect(response.body.operationStatus.messages[0]).to.eq('success');\n  expect(response.body.data[0].userName).to.equalIgnoreCase(data.InternalAdmin); // expect(response.body.data[0].roles[7]).to.eq(data.authAPiData.addressDoctor)\n  // expect(response.body.data[0].firstName).to.eq(data.authAPiData.firstName)\n  //expect(response.body.data[0].employeeType).to.eq(data.authAPiData.employeeType)\n  //expect(response.body.data[0].userType).to.eq(data.authAPiData.userType)\n  // data is an array so start with [] and declare diff objs and compare all imp data\n  expect(response.body.data).to.containSubset([{\n    \"preferredlanguage\": \"en\",\n    \"roles\": [\"EveryOne\", \"CIM\", \"Colt\", \"Request_For_Approval\", \"RemoveUser\", \"RTDTool\", \"AddressDoctor\", \"RaiseFaultTicket\", \"ViewStaticContent\", \"EditUser\", \"viewDocument\", \"AddUser\", \"ViewRegulatoryInformation\", \"ViewServices\", \"ViewOrders\", \"ViewBills\", \"ManageDocument\", \"RaiseBillingEnquiry\", \"RaiseServiceTicket\", \"ViewTickets\", \"RaiseOtherEnquiry\"],\n    \"firstName\": \"test_12\",\n    \"lastName\": \"qwqq\",\n    \"email\": \"deepesh.thukral@colt.net\",\n    \"belongsToOCN\": null,\n    \"isAdmin\": false,\n    \"belongsToBCN\": null,\n    \"isPartner\": false,\n    \"title\": \"Mr.\",\n    \"isActive\": true,\n    \"lastLoginDate\": null,\n    \"lastModifiedBy\": null,\n    \"employeeType\": \"Colt Employee\",\n    \"userName\": \"test2020cs\",\n    \"userType\": \"CUSTOMER_SERVICE\",\n    \"ochId\": \"04806636\",\n    \"xuser\": \"7thbtKrTWj1JrI2AMEkrDg==\",\n    \"ocnaccessList\": []\n  }]);\n});",
              "err": {},
              "uuid": "df285d61-26ae-4ec9-891c-18e7beb0af47",
              "parentUUID": "2516c9a4-1be7-4826-8e71-790b734f353e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "df285d61-26ae-4ec9-891c-18e7beb0af47"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17275,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/results/mochawesome",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "5.1.0"
    }
  }
}